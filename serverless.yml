service: spotbot
package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-pseudo-parameters

custom:
  # dynamodb:
  #   stages:
  #     - ${self:provider.stage}
  #   start:
  #     port: 8000
  #     dbPath: .dynamodb/db
  #     migrate: true
  stage: ${opt:stage, self:provider.stage}
  dev:
    deletion_policy: Delete
  prod:
    deletion_policy: Retain
  prefix: ${self:service}-${self:custom.stage}
  topic: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.prefix}

provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs12.x
  environment:
    REGION: ${self:provider.region}
    AUTH_TABLE: ${self:custom.prefix}-auth
    SETTINGS_TABLE: ${self:custom.prefix}-settings
    SEARCH_TABLE: ${self:custom.prefix}-search
    LOG_LEVEL: info
    SLACK_TOKEN: ${env:SLACK_TOKEN}
    CONFIG: /opt/config/config
    LOGGER: /opt/utils/util-logger
    MOMENT: /opt/moment-timezone/moment-timezone-with-data-1970-2030
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: [
      "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SETTINGS_TABLE}",
      "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SEARCH_TABLE}",
      "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.AUTH_TABLE}"
    ]
  - Effect: Allow
    Action:
      - SNS:Publish
    Resource: "${self:custom.topic}-*"
layers:
  # Main Layers
  core:
    name: ${self:custom.prefix}-core
    path: layers/layers-core
  settings:
    name: ${self:custom.prefix}-settings
    path: layers/layers-settings
  slack:
    name: ${self:custom.prefix}-slack
    path: layers/layers-slack
  spotify:
    name: ${self:custom.prefix}-spotify
    path: layers/layers-spotify
  # Other Layers
  settingsblocks:
    name: ${self:custom.prefix}-settingsblocks
    path: components/settings/layers/layers-settings

functions:
  #Router
  authorizer-slack-headers:
    memorySize: 128
    package:
      include:
        - ./authorizer/**
      exclude:
        - ./**
    handler: authorizer/authorizer-headers.handler
  router:
    environment:
      SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
      SETTINGS_OPEN: ${self:custom.topic}-settings-open
      SETTINGS_UPDATE_VIEW: ${self:custom.topic}-settings-update-view
    memorySize: 512
    package:
      include:
        - ./router/**
      exclude:
        - ./**
    handler: router/server.handler
    events:
      - http:
          method: any
          path: api/{proxy+}
          authorizer: 
            name: authorizer-slack-headers
            identitySource: method.request.header.X-Slack-Request-Timestamp, method.request.header.X-Slack-Signature
            type: request
      - http:
          method: get
          path: spotify-auth-callback
    layers:
      - { Ref: CoreLambdaLayer }
      - { Ref: SpotifyLambdaLayer }
      - { Ref: SettingsLambdaLayer }
      - { Ref: SlackLambdaLayer }

      # - http: 
      #     path: /spotify-auth-callback
      #     method: get
  #Settings
  settings-open:
    environment:
      REDIRECT_URL: https://#{ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}/spotify-auth-callback
    events:
      - sns: ${self:custom.prefix}-settings-open
    memorySize: 320
    package:
      include:
        - ./components/settings/settings-open.js
      exclude:
        - ./**
    handler: components/settings/settings-open.handler
    layers:
      - { Ref: CoreLambdaLayer }
      - { Ref: SettingsLambdaLayer }
      - { Ref: SpotifyLambdaLayer }
      - { Ref: SlackLambdaLayer }
      - { Ref: SettingsblocksLambdaLayer }
  settings-update-view:
    events:
      - sns: ${self:custom.prefix}-settings-update-view
    memorySize: 320
    package:
      include:
        - ./components/settings/settings-update-view.js
      exclude:
        - ./**
    handler: components/settings/settings-open.handler
    layers:
      - { Ref: CoreLambdaLayer }
      - { Ref: SettingsLambdaLayer }
      - { Ref: SpotifyLambdaLayer }
      - { Ref: SlackLambdaLayer }
      - { Ref: SettingsblocksLambdaLayer }



resources:
  Resources:
    SpotbotAuthTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.${self:custom.stage}.deletion_policy}
      Properties:
        BillingMode: 'PAY_PER_REQUEST'
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: team_channel
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: team_channel
            KeyType: RANGE
        SSESpecification:
          SSEEnabled: true
          SSEType: KMS
        TableName: ${self:provider.environment.AUTH_TABLE}
    SpotbotSettingsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.${self:custom.stage}.deletion_policy}
      Properties:
        BillingMode: 'PAY_PER_REQUEST'
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: team_channel
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: team_channel
            KeyType: RANGE
        TableName: ${self:provider.environment.SETTINGS_TABLE}
    SpotbotSearchTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.${self:custom.stage}.deletion_policy}
      Properties:
        BillingMode: 'PAY_PER_REQUEST'
        AttributeDefinitions:
          - AttributeName: triggerId
            AttributeType: S
          - AttributeName: team_channel
            AttributeType: S
        KeySchema:
          - AttributeName: triggerId
            KeyType: HASH
          - AttributeName: team_channel
            KeyType: RANGE
        TableName: ${self:provider.environment.SEARCH_TABLE}
        TimeToLiveSpecification:
            AttributeName: ttl
            Enabled: true
