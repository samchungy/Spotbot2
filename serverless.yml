service: spotbot
package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-pseudo-parameters

custom:
  # dynamodb:
  #   stages:
  #     - ${self:provider.stage}
  #   start:
  #     port: 8000
  #     dbPath: .dynamodb/db
  #     migrate: true
  dev:
    deletion_policy: Delete
  prod:
    deletion_policy: Retain

provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs12.x
  environment:
    REGION: ${self:provider.region}
    AUTH_TABLE: ${self:service}-${opt:stage, self:provider.stage}-auth
    SETTINGS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-settings
    SEARCH_TABLE: ${self:service}-${opt:stage, self:provider.stage}-search
    LOG_LEVEL: info
    SLACK_TOKEN: ${env:SLACK_TOKEN}
    CONFIG: /opt/config/config
    LOGGER: /opt/utils/util-logger
    FUNC_PREFIX: ${self:service}-${opt:stage, self:provider.stage}-
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: [
      "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SETTINGS_TABLE}",
      "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SEARCH_TABLE}",
      "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.AUTH_TABLE}"
    ]
  - Effect: Allow
    Action:
      - lambda:InvokeFunction
    Resource: "arn:aws:lambda:ap-southeast-2:#{AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-"
layers:
  config:
    path: layers/layers-config-utils
  db:
    path: layers/layers-db
  settings:
    path: layers/layers-settings
  slack:
    path: layers/layers-slack

functions:
  #Router
  authorizer-slack-headers:
    memorySize: 128
    package:
      include:
        - ./authorizer/**
      exclude:
        - ./**
    handler: authorizer/authorizer-headers.handler
  router:
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
    environment:
      SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    memorySize: 128
    package:
      include:
        - ./router/**
      exclude:
        - ./**
    handler: router/server.handler
    events:
      - http:
          method: any
          path: api/{proxy+}
          authorizer: 
            name: authorizer-slack-headers
            identitySource: method.request.header.X-Slack-Request-Timestamp, method.request.header.X-Slack-Signature
            type: request
    layers:
      - { Ref: ConfigLambdaLayer }
      - { Ref: DbLambdaLayer }
      - { Ref: SettingsLambdaLayer }
      - { Ref: SlackLambdaLayer }
      # - http: 
      #     path: /spotify-auth-callback
      #     method: get
  #Settings
  settings-open:
    memorySize: 128
    package:
      include:
        - ./components/settings/settings-open.js
      exclude:
        - ./**
    handler: components/settings/settings-open.handler
    layers:
      - { Ref: SlackLambdaLayer }

resources:
  Resources:
    SpotbotAuthTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.${opt:stage, self:provider.stage}.deletion_policy}
      Properties:
        BillingMode: 'PAY_PER_REQUEST'
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: team_channel
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: team_channel
            KeyType: RANGE
        SSESpecification:
          SSEEnabled: true
          SSEType: KMS
        TableName: ${self:provider.environment.AUTH_TABLE}
    SpotbotSettingsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.${opt:stage, self:provider.stage}.deletion_policy}
      Properties:
        BillingMode: 'PAY_PER_REQUEST'
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: team_channel
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: team_channel
            KeyType: RANGE
        TableName: ${self:provider.environment.SETTINGS_TABLE}
    SpotbotSearchTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.${opt:stage, self:provider.stage}.deletion_policy}
      Properties:
        BillingMode: 'PAY_PER_REQUEST'
        AttributeDefinitions:
          - AttributeName: triggerId
            AttributeType: S
          - AttributeName: team_channel
            AttributeType: S
        KeySchema:
          - AttributeName: triggerId
            KeyType: HASH
          - AttributeName: team_channel
            KeyType: RANGE
        TableName: ${self:provider.environment.SEARCH_TABLE}
        TimeToLiveSpecification:
            AttributeName: ttl
            Enabled: true